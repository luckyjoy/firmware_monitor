name: Firmware Monitor CI

'on':
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build_reports:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Generate report (${{ matrix.os }})
        shell: bash
        env:
          BUILD_NUM: ${{ github.run_number }} # <-- NEW: Pass run number as environment variable
        run: |
          set -euo pipefail
          python firmware_monitor.py $BUILD_NUM # <-- Pass variable as argument

          # rename latest html with OS suffix
          LATEST="$(ls -t reports/*.html | head -n 1)"
          OS_SUFFIX="$(echo "${{ matrix.os }}" | tr '[:upper:]' '[:lower:]')"
          mv "$LATEST" "reports/$(basename "$LATEST" .html)_${OS_SUFFIX}.html"

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.os }}
          path: reports

  deploy:
    needs: build_reports
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main 
          
      - name: Checkout archive branch
        uses: actions/checkout@v4
        with:
          ref: report_history
          path: _hist

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          pattern: reports-*
          path: reports
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 'Debug: List reports before merge'
        run: |
          echo "Listing files in ./reports directory:"
          ls -R reports/

      - name: Merge reports and prepare site (Fully Resilient)
        shell: bash
        run: |
          # 1) Attempt to run the script. No build number argument is passed here, 
          # which forces merge mode in firmware_monitor.py.
          python firmware_monitor.py || echo "Warning: firmware_monitor.py failed to generate summary reports. Proceeding."
          
          # We manually check files later, so we can re-enable set -euo pipefail
          set -euo pipefail 
          
          # 2) Setup site directory
          mkdir -p _site/report_history
          
          LATEST_REPORT_HTML="reports/report.html"
          HISTORY_INDEX_HTML="reports/report_history.html"

          # --- Main Index (Root /) Setup ---
          if [ -f "$LATEST_REPORT_HTML" ]; then
            echo "Found merged report. Copying to _site/index.html"
            cp "$LATEST_REPORT_HTML" _site/index.html
          else
            echo "ERROR: Merged report ($LATEST_REPORT_HTML) missing. Using fallback Ubuntu report."
            # Find the most recently created individual report from Ubuntu artifact
            FALLBACK_REPORT="$(ls -t reports/*_ubuntu-latest.html | head -n 1)"
            
            if [ -f "$FALLBACK_REPORT" ]; then
                cp "$FALLBACK_REPORT" _site/index.html
                echo "SUCCESS: Copied fallback report: $FALLBACK_REPORT to _site/index.html"
            else
                echo "CRITICAL ERROR: No fallback report found. Creating error index page."
                echo "<h1>Deployment Failed - Check Action Logs</h1><p>The Python script failed to generate any reports. Check build_reports logs.</p>" > _site/index.html
            fi
          fi
          
          # --- History (/report_history/) Setup ---
          if [ -f "$HISTORY_INDEX_HTML" ]; then
            echo "Found history report. Building site navigation."
            # 3) Copy all individual reports to the history folder
            rsync -a --delete --exclude='report.html' --exclude='report_history.html' reports/ _site/report_history/
            
            # 4) Get list of history links to inject into the history index page in _site
            LINKS="$(sed -n '/<ul/,/<\/ul>/p' reports/report_history.html | sed '1d;$d')"
            
            # 5) Generate a new, static history index page with correct relative links
            echo '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>Archived Report History</title><link rel="stylesheet" href="../style.css"></head><body><a href="../index.html" class="back">← Back to Latest Report</a><h1>Archived Report History</h1><ul>' > _site/report_history/index.html
            echo "${LINKS}" >> _site/report_history/index.html
            echo '</ul><div class="note">All reports are archived here: <a href="https://luckyjoy.github.io/firmware_monitor/report_history/">https://luckyjoy.github.io/firmware_monitor/report_history/</a></div>' >> _site/report_history/index.html
          else
            echo "Warning: History report ($HISTORY_INDEX_HTML) missing. Creating placeholder history index page."
            # Create a basic index page to prevent 404
            echo '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>Archived Report History - Error</title><link rel="stylesheet" href="../style.css"></head><body><a href="../index.html" class="back">← Back to Latest Report</a><h1>Archived Report History</h1><p>Failed to generate history links. Please check the logs for firmware_monitor.py to resolve the underlying bug.</p></body></html>' > _site/report_history/index.html
          fi
          
          # 6) ensure static hosting
          touch _site/.nojekyll

      # Publish the site artifact (contains full history + landing page)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: _site/

      - name: Report GitHub Pages URL
        run: |
          REPORT_URL="https://luckyjoy.github.io/firmware_monitor/"
          
          # Print the URL to the console
          echo "The latest report is published here: ${REPORT_URL}"
          
          # Add a clickable link to the GitHub Actions Job Summary
          echo "## ✅ Latest Report Published" >> $GITHUB_STEP_SUMMARY
          echo "- **[View Latest Report](${REPORT_URL})**" >> $GITHUB_STEP_SUMMARY

      # Update the archive branch contents from _site/report_history
      - name: Commit archive (report_history)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          rsync -a --delete --exclude='.git' _site/report_history/ _hist/
          cd _hist
          git add -A
          if ! git diff --cached --quiet; then
            git -c user.name='github-actions[bot]' -c user.email='github-actions[bot]@users.noreply.github.com' commit -m "Add reports from run ${GITHUB_RUN_NUMBER}"
            git push origin report_history
          fi

      # Final deployment step
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4