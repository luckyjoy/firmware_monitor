name: Firmware Monitor CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  test_and_prepare:
    # 1. Use a matrix to run the analysis on both Ubuntu and Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Run Analysis Script & Prepare Reports (${{ matrix.os }})
      id: generate_report
      # This step uses conditional logic to switch between Bash (Linux) and PowerShell (Windows) commands
      # The output is placed in the 'reports' directory regardless of OS.
      run: |
        # 1. Run the script with the build number argument
        python firmware_monitor.py ${{ github.run_number }}
        
        # Determine shell based on OS for file operations
        if [ "${{ runner.os }}" == "Windows" ]; then
          $shell = "powershell"
          $ReportFilesCmd = "Get-ChildItem -Path reports/report_history -Filter 'firmware_analysis_report_*.html' | Sort-Object Name -Descending"
          
          # Find the most recently created HTML report
          $LatestReportPath = (Get-ChildItem -Path reports/*.html | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          Write-Host "Found latest report: $LatestReportPath"

          # Create directory and copy files
          mkdir reports/report_history
          Copy-Item $LatestReportPath -Destination reports/report_history/
          Copy-Item $LatestReportPath -Destination reports/index.html
          
          # Generate History Index Page (PowerShell)
          $HISTORY_LINKS = ""
          foreach ($File in Invoke-Expression $ReportFilesCmd) {
              $FileName = $File.Name
              $LinkName = $FileName -replace "firmware_analysis_report_(\d{8})_(\d{6})_(\d+).html", "Report Date: `$1 Time: `$2 Build: `$3"
              $HISTORY_LINKS += "<li><a href=`"$FileName`">$LinkName</a></li>`n"
          }

          # Read template and write content
          (Get-Content history_template.html -Raw) -replace '\$HISTORY_LINKS', $HISTORY_LINKS | Out-File reports/report_history/index.html -Encoding UTF8
        
        else # Linux (Ubuntu)
          $shell = "bash"
          
          # Find the most recently created HTML report
          LATEST_REPORT_PATH=$(ls -t reports/*.html | head -n 1)
          echo "Found latest report: $LATEST_REPORT_PATH"

          # Create directory and copy files
          mkdir -p reports/report_history
          cp "$LATEST_REPORT_PATH" reports/report_history/
          cp "$LATEST_REPORT_PATH" reports/index.html

          # Generate History Index Page (Bash/Sed)
          REPORT_FILES=$(find reports/report_history -maxdepth 1 -type f -name 'firmware_analysis_report_*.html' | sort -r)
          HISTORY_LINKS=""
          for file_path in $REPORT_FILES; do
            filename=$(basename "$file_path")
            link_name=$(echo "$filename" | sed -E 's/firmware_analysis_report_([0-9]{8})_([0-9]{6})_([0-9]+).html/Report Date: \1 Time: \2 Build: \3/')
            HISTORY_LINKS+="<li><a href=\"$filename\">$link_name</a></li>"
          done
          
          cat history_template.html | sed "s|\$HISTORY_LINKS|$HISTORY_LINKS|g" > reports/report_history/index.html
        fi

    # Only upload artifacts once, using the successful Ubuntu run's output for deployment
    - name: Upload Report Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'reports/' 

  # --- Docker Build and Pages Deployment (Runs once) ---
  build_and_deploy:
    # This job handles the Pages deployment and Docker build
    needs: test_and_prepare
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # Use checkout again for the Docker build context
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------------------------------
      # Docker Image Build/Push for GHCR
      # ---------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Dockerfile 
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      # ---------------------------------------------
      # GitHub Pages Deployment
      # ---------------------------------------------
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4