name: Firmware Monitoring CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Grant GITHUB_TOKEN permissions for contents and pages deployment
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Run Analysis Script & Generate Reports
      # Executes firmware_monitor.py and passes the GitHub Actions run number as an argument.
      # We are keeping the run number argument in case you update the Python script later, 
      # but the CI search relies on the simpler date/time format for now.
      run: python firmware_monitor.py ${{ github.run_number }}
      
    - name: Find and Rename Latest Report to index.html
      id: rename_report
      # FIX: Removed the build number from the search pattern as the Python script output does not contain it yet.
      # We rely on 'ls -t' to find the most recently created file using the basic date/time stamp.
      run: |
        REPORT_PATTERN="reports/firmware_analysis_report_*.html"
        REPORT_FILE=$(ls -t $REPORT_PATTERN | head -n 1) # 'ls -t' sorts by modification time

        # Check if REPORT_FILE is empty, which means no file was found
        if [ -z "$REPORT_FILE" ]; then
          echo "Error: No report file found matching pattern $REPORT_PATTERN. Check the Python script's output file naming."
          exit 1
        fi
        
        mv "$REPORT_FILE" reports/index.html
        echo "Renamed $REPORT_FILE to reports/index.html for GitHub Pages deployment."
        echo "report_path=reports/index.html" >> $GITHUB_OUTPUT

    - name: Upload Report Artifact for GitHub Pages
      # Uploads the entire reports folder, which now contains the latest report renamed as index.html
      uses: actions/upload-pages-artifact@v3
      with:
        path: reports/
        
    # Docker build steps are omitted here as per conversation, but could be re-added
    # if the Dockerfile is corrected to not rely on requirements.txt.

  # Deployment job runs only after build_and_test is complete and only on the main branch push
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
