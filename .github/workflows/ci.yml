name: Firmware Monitor CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    # CRITICAL: Define permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write 
      id-token: write 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Run Analysis Script and generate reports
      # Passes the GitHub Run Number. Assumes firmware_monitor.py uses argparse
      run: |
        python firmware_monitor.py --build-number ${{ github.run_number }}
        
    - name: Prepare Report History Directory for Pages
      # The script generates files in 'reports/'. We move them into the final deployment structure.
      run: |
        mkdir -p report_history
        mv reports/* report_history/

    - name: Setup Pages
      # Configures the Pages environment
      uses: actions/configure-pages@v5

    - name: Upload Report Artifacts
      # Uploads the 'report_history' folder content as the deployment artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'report_history/' 

    - name: Deploy to GitHub Pages
      id: deployment
      # Deploys the uploaded artifact
      uses: actions/deploy-pages@v4
      
    # ---------------------------------------------
    # Docker Image Build/Push for GHCR
    # ---------------------------------------------

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Local Analysis Image (No requirements.txt needed)
      # Creates a minimal Dockerfile.ci on the fly to avoid external dependencies like requirements.txt.
      run: |
        cat <<EOF > Dockerfile.ci
        FROM python:3.10-slim
        WORKDIR /app
        # Only copy the essential script
        COPY firmware_monitor.py .
        CMD ["python", "firmware_monitor.py"]
        EOF
        
    - name: Log in to GitHub Container Registry (GHCR)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        file: Dockerfile.ci # Use the dynamically created Dockerfile
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
