name: Firmware Monitor CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write    # For checkout, artifacts, and pushing to the history branch
  pages: write       # For deploying to GitHub Pages
  id-token: write    # For authentication with Pages deployment action
  packages: write    # For pushing Docker images to GHCR

jobs:
  # --- Stage 1: Run Tests on Matrix and Generate Reports ---
  test_and_prepare:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Run Analysis Script & Rename Report (${{ matrix.os }})
      id: generate_report
      shell: bash
      run: |
        # 1. Run the script with the build number as a simple positional argument
        python firmware_monitor.py ${{ github.run_number }}
        
        # 2. Find the most recently created HTML report (Robust discovery)
        LATEST_REPORT_PATH=$(ls -t reports/*.html | head -n 1)
        
        if [ -z "$LATEST_REPORT_PATH" ]; then
          echo "::error::No report file found!"
          exit 1
        fi
        
        # 3. Rename the generated report to include the OS name for uniqueness
        OS_SUFFIX=$(echo "${{ matrix.os }}" | tr '[:upper:]' '[:lower:]')
        BASE_NAME=$(basename "$LATEST_REPORT_PATH" .html)
        NEW_FILENAME="${BASE_NAME}_${OS_SUFFIX}.html"
        
        mv "$LATEST_REPORT_PATH" "reports/$NEW_FILENAME"
        echo "Renamed report: reports/$NEW_FILENAME"

    # 4. Upload the reports folder as an artifact for the next job
    - name: Upload Analysis Reports Artifact
      uses: actions/upload-artifact@v4
      with:
        name: analysis-reports-${{ matrix.os }}
        path: reports/

  # --- Stage 2: Combine Reports, Build History, Deploy ---
  build_and_deploy:
    needs: test_and_prepare
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # 1. Checkout the MAIN branch code (needed for Dockerfile and history_template.html)
      - name: Checkout Main Branch Code
        uses: actions/checkout@v4
        
      # 2. RETRIEVE EXISTING HISTORY (Persistence Fix)
      - name: Retrieve Existing Report History
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: report_history # CRITICAL: Get files from the dedicated branch
          path: history_temp
          
      # 3. Download all reports from the current matrix runs
      - name: Download Windows Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-windows-latest
          path: reports/
          
      - name: Download Ubuntu Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-ubuntu-latest
          path: reports/

      # 4. Prepare Final Deployment Artifact (Combine History, Build Index)
      - name: Prepare Reports for Deployment
        shell: bash
        run: |
          # Create final deployment structure
          mkdir -p reports/report_history
          
          # --- Merge Existing History (Persistence Fix) ---
          # Copy old reports into the new structure before adding new ones
          if [ -d history_temp/reports/report_history ]; then
            echo "Copying existing reports from history_temp..."
            cp -r history_temp/reports/report_history/* reports/report_history/ 
          fi
          
          # --- Add New Reports ---
          # Archive all newly generated reports (from matrix) into report_history
          cp reports/*_ubuntu-latest.html reports/report_history/
          cp reports/*_windows-latest.html reports/report_history/

          # Choose ONE (Ubuntu) report to be the main index.html for the latest run
          LATEST_UBUNTU_REPORT=$(ls -t reports/*_ubuntu-latest.html | head -n 1)
          cp "$LATEST_UBUNTU_REPORT" reports/index.html
          
          # Generate History Index Page
          REPORT_FILES=$(find reports/report_history -maxdepth 1 -type f -name 'firmware_analysis_report_*.html' | sort -r)
          
          HISTORY_LINKS=""
          for file_path in $REPORT_FILES; do
            filename=$(basename "$file_path")
            # Add OS suffix to link name for clarity in the history index
            link_name=$(echo "$filename" | sed -E 's/firmware_analysis_report_([0-9]{8})_([0-9]{6})_([0-9]+)_(.*).html/Report Date: \1 Time: \2 Build: \3 OS: \4/')
            HISTORY_LINKS+="<li><a href=\"$filename\">$link_name</a></li>"
          done
          
          cat history_template.html | sed "s|\$HISTORY_LINKS|$HISTORY_LINKS|g" > reports/report_history/index.html

      # 5. Upload the final prepared 'reports' folder for GitHub Pages deployment
      - name: Upload Final Deployment Artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'reports/' 
          
      # 6. PUSH COMBINED HISTORY BACK (CRITICAL for Persistence)
      - name: Push Combined History Back to Repository
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: reports/report_history 
          branch: report_history
          force: true # Required to bypass Git rejection errors
          
      # ---------------------------------------------
      # Docker Image Build/Push for GHCR
      # ---------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile 
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      # ---------------------------------------------
      # GitHub Pages Deployment
      # ---------------------------------------------
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4