# --- Stage 2: Combine Reports, Build History, Deploy ---
  build_and_deploy:
    # Depends on both matrix jobs completing successfully
    needs: test_and_prepare
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # CRITICAL FIX: Ensure the reports directory is ready
      - name: Initialize Reports Directory
        run: mkdir -p reports/report_history
        
      # 1. Download all reports from the matrix runs
      - name: Download Windows Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-windows-latest
          path: reports/
          
      - name: Download Ubuntu Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-ubuntu-latest
          path: reports/

      # 2. PERSISTENCE FIX: Pull existing history from the repository
      - name: Retrieve Existing History (and clone into history_temp)
        uses: actions/checkout@v4
        with:
          ref: report_history # Use a dedicated branch for history
          path: history_temp
          
      - name: Merge Existing History with New Reports
        shell: bash
        run: |
          # Copy old reports into the new structure
          if [ -d history_temp/reports/report_history ]; then
            echo "Copying existing reports from history_temp..."
            cp -r history_temp/reports/report_history/* reports/report_history/ 
          fi
          
          # 3. Archive all newly generated reports (from matrix) into report_history
          # Reports generated in the current run:
          cp reports/*_ubuntu-latest.html reports/report_history/
          cp reports/*_windows-latest.html reports/report_history/

          # 4. Choose ONE (Ubuntu) report to be the main index.html for the latest run
          LATEST_UBUNTU_REPORT=$(ls -t reports/*_ubuntu-latest.html | head -n 1)
          cp "$LATEST_UBUNTU_REPORT" reports/index.html
          
          # 5. Generate History Index Page (Runs once)
          REPORT_FILES=$(find reports/report_history -maxdepth 1 -type f -name 'firmware_analysis_report_*.html' | sort -r)
          
          HISTORY_LINKS=""
          for file_path in $REPORT_FILES; do
            filename=$(basename "$file_path")
            
            # Add OS suffix to link name for clarity in the history index
            link_name=$(echo "$filename" | sed -E 's/firmware_analysis_report_([0-9]{8})_([0-9]{6})_([0-9]+)_(.*).html/Report Date: \1 Time: \2 Build: \3 OS: \4/')
            HISTORY_LINKS+="<li><a href=\"$filename\">$link_name</a></li>"
          done
          
          # Use the template file and substitute the links variable
          cat history_template.html | sed "s|\$HISTORY_LINKS|$HISTORY_LINKS|g" > reports/report_history/index.html

      # 6. Upload the final prepared 'reports' folder for deployment
      - name: Upload Final Deployment Artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'reports/' 
          
      # ---------------------------------------------
      # Docker Image Build/Push for GHCR
      # ---------------------------------------------
      # ... (Docker build steps remain unchanged) ...
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Dockerfile 
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      # ---------------------------------------------
      # GitHub Pages Deployment
      # ---------------------------------------------
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4