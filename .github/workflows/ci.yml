name: Firmware Monitoring CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Grant GITHUB_TOKEN permissions for contents and pages deployment
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Local Analysis Image
      # Builds a simple image based on python:3.10-slim for consistency, 
      # copying only the necessary script (firmware_monitor.py).
      run: |
        cat <<EOF > Dockerfile.ci
        FROM python:3.10-slim
        WORKDIR /app
        COPY firmware_monitor.py .
        CMD ["python", "firmware_monitor.py"]
        EOF
        docker build -t firmware-monitor-ci -f Dockerfile.ci .

    - name: Run Analysis Script & Generate Reports (via Docker Run)
      # Executes the script inside the newly built container using 'docker run'.
      # -v $(pwd)/reports:/app/reports mounts the host reports directory to the container's /app/reports.
      # The script output is thus available on the host runner after the container exits.
      run: |
        mkdir -p reports # Ensure host reports directory exists
        docker run \
          --name analysis-run \
          -v $(pwd)/reports:/app/reports \
          firmware-monitor-ci \
          python firmware_monitor.py ${{ github.run_number }}
      
    - name: Find and Rename Latest Report to index.html
      id: rename_report
      # The files are now in the host's ./reports directory due to the volume mount.
      # Use 'ls -t' to find the most recently created file, which is the safest method.
      run: |
        REPORT_PATTERN="reports/firmware_analysis_report_*.html"
        REPORT_FILE=$(ls -t $REPORT_PATTERN | head -n 1) # 'ls -t' sorts by modification time

        # Check if REPORT_FILE is empty, which means no file was found
        if [ -z "$REPORT_FILE" ]; then
          echo "Error: No report file found matching pattern $REPORT_PATTERN. Check the Python script's output file naming."
          exit 1
        fi
        
        # Move the file within the host runner environment
        mv "$REPORT_FILE" reports/index.html
        echo "Renamed $REPORT_FILE to reports/index.html for GitHub Pages deployment."
        echo "report_path=reports/index.html" >> $GITHUB_OUTPUT

    - name: Upload Report Artifact for GitHub Pages
      # Uploads the directory containing the report (now named index.html).
      # The path is relative to the workspace, which is './reports'
      uses: actions/upload-pages-artifact@v3
      with:
        path: reports/
        
  # Deployment job runs only after build_and_test is complete and only on the main branch push
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
