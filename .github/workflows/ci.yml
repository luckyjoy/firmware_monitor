name: Firmware Monitor CI

'on':
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  test_and_prepare:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run Analysis Script & Rename Report (${{ matrix.os }})
        shell: bash
        run: |
          set -euo pipefail
          # Generate reports with run number as "build"
          python firmware_monitor.py ${{ github.run_number }}

          # Find the latest HTML produced by the script
          LATEST_REPORT_PATH="$(ls -t reports/*.html | head -n 1)"
          if [ -z "${LATEST_REPORT_PATH}" ]; then
            echo "::error::No report file found!"
            exit 1
          fi

          # Append OS suffix so the two legs don't collide
          OS_SUFFIX="$(echo "${{ matrix.os }}" | tr '[:upper:]' '[:lower:]')"
          BASE_NAME="$(basename "${LATEST_REPORT_PATH}" .html)"
          NEW_FILENAME="${BASE_NAME}_${OS_SUFFIX}.html"
          mv "${LATEST_REPORT_PATH}" "reports/${NEW_FILENAME}"

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports-${{ matrix.os }}
          path: reports/

  build_and_deploy:
    needs: test_and_prepare
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main

      # Pull the previously deployed site (gh-pages) so we can carry forward history
      - name: Checkout gh-pages (previous site)
        id: ghpages
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: site_prev
          fetch-depth: 1

      # Download both OS artifacts into ./new_reports
      - name: Download Windows report
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-windows-latest
          path: new_reports/

      - name: Download Ubuntu report
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-ubuntu-latest
          path: new_reports/

      - name: Assemble site (merge previous history + add new)
        shell: bash
        run: |
          set -euo pipefail

          # Our deployment root
          mkdir -p site_out/report_history

          echo "== Bring forward previous history from gh-pages =="
          if [ -d site_prev/report_history ]; then
            cp -a site_prev/report_history/. site_out/report_history/ || true
          else
            echo "No previous report_history found (first deployment or branch reset)."
          fi

          echo "== Add this run's reports =="
          shopt -s nullglob
          cp -f new_reports/*_ubuntu-latest.html   site_out/report_history/ 2>/dev/null || true
          cp -f new_reports/*_windows-latest.html  site_out/report_history/ 2>/dev/null || true

          echo "== Pick latest (Ubuntu preferred) for site root index =="
          LATEST_UBU="$(ls -t new_reports/*_ubuntu-latest.html 2>/dev/null | head -n 1 || true)"
          if [ -n "$LATEST_UBU" ]; then
            cp "$LATEST_UBU" site_out/index.html
          else
            ANY_HTML="$(ls -t new_reports/*.html 2>/dev/null | head -n 1 || true)"
            [ -n "$ANY_HTML" ] && cp "$ANY_HTML" site_out/index.html || { echo "::error::No HTML to serve as index.html"; exit 1; }
          fi

          echo "== Build history index (pure HTML, absolute Back link) =="
          mapfile -t FILES < <(find site_out/report_history -maxdepth 1 -type f -name 'firmware_analysis_report_*.html' | sort -r)
          LINKS=""
          for f in "${FILES[@]}"; do
            b="$(basename "$f")"
            label="$(echo "$b" \
              | sed -E 's/^firmware_analysis_report_([0-9]{8})_([0-9]{6})(_[0-9]+)?_(.*)\.html$/Date: \1 Time: \2 Build: \3 OS: \4/' \
              | sed 's/_//g' \
              | sed 's/Build:  /Build: NA /')"
            LINKS+="<li><a href=\"$b\">$label</a></li>"
          done

          {
            printf '%s\n' '<!doctype html><html lang="en"><head><meta charset="utf-8" />'
            printf '%s\n' '<meta name="viewport" content="width=device-width, initial-scale=1" />'
            printf '%s\n' '<title>Report History</title>'
            printf '%s\n' '<style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif;margin:2rem;color:#111827}a{color:#1d4ed8;text-decoration:none}a:hover{text-decoration:underline}.back{margin-bottom:1rem;display:inline-block}h1{margin:.2rem 0 1rem}ul{padding-left:1.2rem}li{margin:.35rem 0}.note{margin-top:1.5rem;color:#6b7280;font-size:.9rem}</style></head><body>'
            printf '%s\n' '<a class="back" href="/firm Latest Report</a>'
            printf '%s\n' '<h1>Archived Report History</h1><ul>'
            printf '%s\n' "$LINKS"
            printf '%s\n' '</ul><div class="note">All reports are archived here: /firmware_monitor/report_history/</div></body></html>'
          } > site_out/report_history/index.html

          # Ensure Pages doesn't try to run Jekyll
          touch site_out/.nojekyll

      - name: Upload Pages artifact (full site)
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'site_out/'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4