name: Firmware Monitor CI

'on':
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build_reports:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1. Build the Docker Image locally on the runner
      - name: Build Docker Image
        run: docker build -t firmware-monitor-local .

      # 2. Run the Report Generation inside the Docker Container
      - name: Run Docker Report Generation (${{ matrix.os }})
        shell: bash
        run: |
          set -euo pipefail
          
          # Create reports directory on the host runner to receive output
          mkdir -p reports
          
          # Run the script inside the container:
          # - --rm: Remove the container after exit
          # - -v: Mount the host reports directory to /app/reports inside the container
          docker run \
            --rm \
            -v "$(pwd)/reports:/app/reports" \
            firmware-monitor-local \
            /usr/local/bin/python firmware_monitor.py ${{ github.run_number }}
          
          # Post-processing (renaming) remains on the host runner
          LATEST="$(ls -t reports/firmware_analysis_report_*.html | head -n 1)"
          OS_SUFFIX="$(echo "${{ matrix.os }}" | tr '[:upper:]' '[:lower:]')"
          mv "$LATEST" "reports/$(basename "$LATEST" .html)_${OS_SUFFIX}.html"

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.os }}
          path: reports/

  publish_site:
    needs: build_reports
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1. Download all artifacts into a single 'reports' folder
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          pattern: reports-*
          path: _new/
          merge-multiple: true 
          
      # 2. Clone the report_history branch into ./_hist
      - name: Checkout archive branch (report_history)
        uses: actions/checkout@v4
        with:
          ref: report_history
          path: _hist 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Merge history and generate summary reports (report.html & report_history.html)
      - name: Prepare History and Merge Reports
        shell: bash
        env:
          BUILD_NUM: ${{ github.run_number }}
          
        run: |
          set -euo pipefail
          
          # Flatten artifact structure (handles download quirks)
          echo "Flattening downloaded reports..."
          find _new/ -mindepth 2 -name '*.html' -exec mv {} _new/ \;
          find _new/ -mindepth 2 -name '*.txt' -exec mv {} _new/ \;
          find _new/ -mindepth 1 -type d -delete 2>/dev/null || true
          
          # Copy history from _hist into the _new directory for processing
          rsync -a _hist/ _new/
          
          # Run Python in merge mode (no argument) to generate report.html and report_history.html
          # Use a temporary reports folder for the python script output
          mkdir -p reports_temp
          cp _new/* reports_temp/ 2>/dev/null || true # Copy existing reports to temp folder
          
          # Note: The Python script needs all files in the current working directory, 
          # but since it's only using MOCK_LOG_DATA, we'll run it here.
          # If the python script reads report files, it should be run in the _new directory.
          # For robustness, let's copy the script and run it in _new.
          
          cp firmware_monitor.py _new/
          cd _new
          python firmware_monitor.py 
          cd .. # Go back to root
          
          # Setup _site directory structure
          mkdir -p _site/report_history
          
          # Copy merged report to the landing page
          cp _new/report.html _site/index.html
          
          # Copy all unique reports (new and old) to the history folder
          rsync -a --exclude='report.html' --exclude='report_history.html' _new/ _site/report_history/
          
          # Generate the history index page content using the Python-generated report_history.html
          REPORT_URL="https://luckyjoy.github.io/firmware_monitor/"
          LINKS="$(sed -n '/<ul/,/<\/ul>/p' _new/report_history.html | sed '1d;$d')"
          
          # FIX: Use absolute URL for back link and fix list content
          echo "<!doctype html><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title>Report History</title><style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif;margin:2rem;color:#111827}a{color:#1d4ed8;text-decoration:none}a:hover{text-decoration:underline}.back{margin-bottom:1rem;display:inline-block;padding:.5rem .75rem;background:#dbeafe;border-radius:6px;font-weight:600}h1{margin:.2rem 0 1rem}ul{padding-left:1.2rem}li{margin:.35rem 0}.note{margin-top:1.5rem;color:#6b7280;font-size:.9rem}</style><a href=\"${REPORT_URL}\" class=\"back\">← Back to Latest Report</a><h1>Archived Report History</h1><ul>" > _site/report_history/index.html
          echo "${LINKS}" >> _site/report_history/index.html
          echo '</ul><div class="note">All reports are archived here: <a href="https://luckyjoy.github.io/firmware_monitor/report_history/">https://luckyjoy.github.io/firmware_monitor/report_history/</a></div>' >> _site/report_history/index.html

          # Ensure static hosting
          touch _site/.nojekyll

      # 4. Publish the site artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: _site/

      # 5. Add link to job summary
      - name: Add link to job summary
        shell: bash
        run: |
          REPORT_URL="https://luckyjoy.github.io/firmware_monitor/"
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "✅ **[Report Published]($REPORT_URL)**" >> $GITHUB_STEP_SUMMARY

      # 6. Update the archive branch contents
      - name: Commit archive (report_history)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          rsync -a --delete --exclude='.git' _site/report_history/ _hist/
          cd _hist
          git add -A
          if ! git diff --cached --quiet; then
            git -c user.name='github-actions[bot]' -c user.email='github-actions[bot]@users.noreply.github.com' commit -m "Add reports from run ${GITHUB_RUN_NUMBER}"
            git push origin HEAD:report_history
          else
            echo "No archive changes."
          fi

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4