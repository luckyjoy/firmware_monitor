name: Firmware Monitor CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

# Prevent overlapping Pages deployments
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  # --- Stage 1: Run Tests on Matrix and Generate Reports ---
  test_and_prepare:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run Analysis Script & Rename Report (${{ matrix.os }})
        id: generate_report
        shell: bash
        run: |
          set -euo pipefail

          # Run the report generator with build number (GitHub run number)
          python firmware_monitor.py ${{ github.run_number }}

          # Find the latest HTML produced by the script
          LATEST_REPORT_PATH="$(ls -t reports/*.html | head -n 1)"
          if [ -z "${LATEST_REPORT_PATH}" ]; then
            echo "::error::No report file found!"
            exit 1
          fi

          # Normalize the OS suffix and rename the file for uniqueness
          OS_SUFFIX="$(echo "${{ matrix.os }}" | tr '[:upper:]' '[:lower:]')"
          BASE_NAME="$(basename "${LATEST_REPORT_PATH}" .html)"
          NEW_FILENAME="${BASE_NAME}_${OS_SUFFIX}.html"
          mv "${LATEST_REPORT_PATH}" "reports/${NEW_FILENAME}"
          echo "Renamed report: reports/${NEW_FILENAME}"

      - name: Upload Analysis Reports Artifact
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports-${{ matrix.os }}
          path: reports/

  # --- Stage 2: Combine Reports, Build History, Deploy ---
  build_and_deploy:
    needs: test_and_prepare
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout Main Branch Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Retrieve EXISTING history (branch root -> history_temp/)
      - name: Retrieve Existing Report History (if branch exists)
        id: fetch_history
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: ${{ github.repository }}
          ref: report_history
          path: history_temp
          fetch-depth: 1

      # Download this run's artifacts (both OSes)
      - name: Download Windows Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-windows-latest
          path: reports/

      - name: Download Ubuntu Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-ubuntu-latest
          path: reports/

      - name: Prepare Reports for Deployment (merge history + build indexes)
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p reports/report_history

          # --- Merge existing history from the dedicated branch (ROOT) ---
          if [ -d history_temp ]; then
            shopt -s nullglob dotglob
            cp -r history_temp/* reports/report_history/ || true
          fi

          # --- Add NEW reports from this run ---
          shopt -s nullglob
          for f in reports/*_ubuntu-latest.html;  do cp "$f" reports/report_history/; done
          for f in reports/*_windows-latest.html; do cp "$f" reports/report_history/; done

          # --- Choose one (Ubuntu) as the latest landing page ---
          LATEST_UBUNTU_REPORT="$(ls -t reports/*_ubuntu-latest.html | head -n 1)"
          cp "${LATEST_UBUNTU_REPORT}" reports/index.html

          # --- Build History Index page using HTML template ---
          mapfile -t REPORT_FILES < <(find reports/report_history -maxdepth 1 -type f -name 'firmware_analysis_report_*.html' | sort -r)

          HISTORY_LINKS=""
          for file_path in "${REPORT_FILES[@]}"; do
            filename="$(basename "$file_path")"
            # Expected: firmware_analysis_report_YYYYMMDD_HHMMSS[_BUILD]_os.html
            link_name="$(echo "$filename" \
              | sed -E 's/^firmware_analysis_report_([0-9]{8})_([0-9]{6})(_[0-9]+)?_(.*)\.html$/Date: \1 Time: \2 Build: \3 OS: \4/' \
              | sed 's/_//g' \
              | sed 's/Build:  /Build: NA /')"
            HISTORY_LINKS+="<li><a href=\"$filename\">$link_name</a></li>"
          done

          # Ensure Pages doesnâ€™t try to run Jekyll
          touch reports/.nojekyll

          # Fill template placeholder (expects {{HISTORY_LINKS}} in history_template.html)
          sed "s|{{HISTORY_LINKS}}|$HISTORY_LINKS|g" history_template.html > reports/report_history/index.html

      - name: Upload Final Deployment Artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'reports/'

      - name: Push Combined History Back to Repository
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: reports/report_history
          branch: report_history
          # Once stable, you can set this to false
          force: true

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4