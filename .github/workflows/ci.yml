name: Firmware Monitor CI

'on':
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  test_and_prepare:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run Analysis Script & Rename Report (${{ matrix.os }})
        shell: bash
        run: |
          set -euo pipefail
          # Generate reports with run number as build ID
          python firmware_monitor.py ${{ github.run_number }}

          # Find the latest HTML produced by the script
          LATEST_REPORT_PATH="$(ls -t reports/*.html | head -n 1)"
          if [ -z "${LATEST_REPORT_PATH}" ]; then
            echo "::error::No report file found!"
            exit 1
          fi

          # Rename with OS suffix for uniqueness
          OS_SUFFIX="$(echo "${{ matrix.os }}" | tr '[:upper:]' '[:lower:]')"
          BASE_NAME="$(basename "${LATEST_REPORT_PATH}" .html)"
          NEW_FILENAME="${BASE_NAME}_${OS_SUFFIX}.html"
          mv "${LATEST_REPORT_PATH}" "reports/${NEW_FILENAME}"
          echo "Renamed report: reports/${NEW_FILENAME}"

      - name: Upload Analysis Reports Artifact
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports-${{ matrix.os }}
          path: reports/

  build_and_deploy:
    needs: test_and_prepare
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Pull any existing history branch contents into ./history
      - name: Checkout report_history (if exists)
        id: history
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          ref: report_history
          path: history
          fetch-depth: 1

      # Download both OS artifacts into ./reports
      - name: Download Windows Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-windows-latest
          path: reports/

      - name: Download Ubuntu Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports-ubuntu-latest
          path: reports/

      - name: Merge history + new reports and build pages
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p reports/report_history

          echo "== Copy existing history from branch root =="
          if [ -d history ]; then
            shopt -s dotglob nullglob
            cp -a history/* reports/report_history/ || true
            rm -rf reports/report_history/.git || true
          else
            echo "No history dir (first run or branch missing)."
          fi

          echo "== Add new reports from this run =="
          shopt -s nullglob
          cp -f reports/*_ubuntu-latest.html  reports/report_history/ 2>/dev/null || true
          cp -f reports/*_windows-latest.html reports/report_history/ 2>/dev/null || true

          echo "== Choose latest (Ubuntu preferred) for site root =="
          LATEST_UBU="$(ls -t reports/*_ubuntu-latest.html 2>/dev/null | head -n 1 || true)"
          if [ -n "$LATEST_UBU" ]; then
            cp "$LATEST_UBU" reports/index.html
          else
            ANY_HTML="$(ls -t reports/*.html 2>/dev/null | head -n 1 || true)"
            [ -n "$ANY_HTML" ] && cp "$ANY_HTML" reports/index.html || { echo "::error::No HTML to serve as index.html"; exit 1; }
          fi

          echo "== Build history index page from template =="
          mapfile -t FILES < <(find reports/report_history -maxdepth 1 -type f -name 'firmware_analysis_report_*.html' | sort -r)
          LINKS=""
          for f in "${FILES[@]}"; do
            b="$(basename "$f")"
            label="$(echo "$b" \
              | sed -E 's/^firmware_analysis_report_([0-9]{8})_([0-9]{6})(_[0-9]+)?_(.*)\.html$/Date: \1 Time: \2 Build: \3 OS: \4/' \
              | sed 's/_//g' \
              | sed 's/Build:  /Build: NA /')"
            LINKS+="<li><a href=\"$b\">$label</a></li>"
          done

          if [ -f history_template.html ]; then
            sed "s|{{HISTORY_LINKS}}|$LINKS|g" history_template.html > reports/report_history/index.html
          else
            # Minimal fallback if template missing
            {
              echo '<!doctype html><meta charset="utf-8">'
              echo '<title>Report History</title>'
              echo '/firmware_monitor/‚Üê Back to Latest Report</a>'
              echo '<h1>Archived Report History</h1><ul>'
              echo "$LINKS"
              echo '</ul><div class="note">All reports are archived here: /firmware_monitor/report_history/</div>'
            } > reports/report_history/index.html
          fi

          # Ensure static hosting (no Jekyll processing)
          touch reports/.nojekyll

      - name: Upload Pages artifact (merged history)
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'reports/'

      - name: Push Combined History Back to report_history branch
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: reports/report_history
          branch: report_history
          force: false

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4